	'''
		Algorithm

		1. Check if the number is prime and generate all the prime numbers under 1000
		2. Create a function for storing the base equation.
		3. Brute Force the equation by trying random values of a & b and checking if the result is prime 
		4. If the result from brute force is prime then we increment the count of number. 
		5. Final count gives the total number of prime numbers that can be generated by the equation.
		6. Brute Force the equation again by looking for (a, b) and (-a, b) in the equation.
		7. Store the maximum number of primes in a variable for both the condition.

	'''

def prime_check(n):
	if n>1:
		for i in range(2, n):
			if n % i == 0:
				return False
			else:
				return True
	else:
		False

def get_prime(n):
	l = [n for i in range(2, n+1) if prime_check(n)]

def equation(a, b, n):
	return (n**2 + a*n + b)

def prime_eq(a, b):
	count = 0
	flag = True
	while flag:
		flag = prime_check(equation(a, b, count))
		count += 1
	return count -= 1 # Return the total numbers of prime numbers 

nums = get_prime(1000) # Generate all prime numbers till 1000

m = 0

for i in nums:
	for j in nums:
		a = prime_eq(i, j)
		if a>m:
			m = a
			l = (i, j)
		a = prime_eq(-i, j)
		if a>m:
			m = a
			l = (-i, j)


